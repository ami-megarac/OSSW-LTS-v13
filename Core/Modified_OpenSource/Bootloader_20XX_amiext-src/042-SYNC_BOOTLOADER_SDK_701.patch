--- uboot/include/dt-bindings/clock/ast2600-clock.h	2020-11-20 17:00:27.000000000 +0800
+++ uboot-new/include/dt-bindings/clock/ast2600-clock.h	2021-09-10 15:25:12.245480705 +0800
@@ -33,7 +33,7 @@
 #define ASPEED_CLK_GATE_MAC2CLK		25
 #define ASPEED_CLK_GATE_MAC3CLK		26
 #define ASPEED_CLK_GATE_MAC4CLK		27
-#define ASPEED_CLK_GATE_RSACLK		28
+#define ASPEED_CLK_GATE_RSAECCCLK	28
 #define ASPEED_CLK_GATE_SDCLK		29
 #define ASPEED_CLK_GATE_SDEXTCLK	30
 #define ASPEED_CLK_GATE_EMMCCLK		31
--- uboot/drivers/clk/aspeed/clk_ast2600.c	2021-09-09 10:20:39.870858117 +0800
+++ uboot-new/drivers/clk/aspeed/clk_ast2600.c	2021-09-11 13:38:01.094041304 +0800
@@ -427,26 +427,27 @@
 	u32 clkin = 0;
 	u32 clk_sel = readl(&scu->clk_sel4);
 	u32 div = (clk_sel >> 28) & 0x7;
+	u32 hw_rev = readl(&scu->chip_id1);
 
 	if (clk_sel & BIT(8))
 		clkin = ast2600_get_apll_rate(scu);
 	else
 		clkin = ast2600_get_hclk(scu);
 
-	div = (div + 1) << 1;
+	div = (1 + div) * 2;
+	if (((hw_rev & GENMASK(23, 16)) >> 16) >= 2)
+		div = (div & 0xf) ? div : 1;
 
 	return (clkin / div);
 }
 
 static u32 ast2600_get_emmc_clk_rate(struct ast2600_scu *scu)
 {
-//	u32 clkin = ast2600_get_pll_rate(scu, ASPEED_CLK_HPLL);
 	u32 mmc_clk_src = readl(&scu->clk_sel1);
 	u32 clkin;
 	u32 clk_sel = readl(&scu->clk_sel1);
 	u32 div = (clk_sel >> 12) & 0x7;
 
-//	div = (div + 1) << 2;
 	if (mmc_clk_src & BIT(11)) {
 		/* emmc clock comes from MPLL */
 		clkin = ast2600_get_pll_rate(scu, ASPEED_CLK_MPLL);
@@ -455,6 +456,7 @@
 		clkin = ast2600_get_pll_rate(scu, ASPEED_CLK_HPLL);
 		div = (div + 1) << 2;
 	}
+
 	return (clkin / div);
 }
 
@@ -1232,6 +1234,18 @@
 	return 0;
 }
 
+static ulong ast2600_enable_rsaeccclk(struct ast2600_scu *scu)
+{
+	u32 clkstop_bit;
+
+	clkstop_bit = BIT(24);
+
+	writel(clkstop_bit, &scu->clk_stop_clr_ctrl1);
+	mdelay(20);
+
+	return 0;
+}
+
 static int ast2600_clk_enable(struct clk *clk)
 {
 	struct ast2600_clk_priv *priv = dev_get_priv(clk->dev);
@@ -1273,6 +1287,9 @@
 	case ASPEED_CLK_GATE_YCLK:
 		ast2600_enable_haceclk(priv->scu);
 		break;
+	case ASPEED_CLK_GATE_RSAECCCLK:
+		ast2600_enable_rsaeccclk(priv->scu);
+		break;
 	default:
 		pr_err("can't enable clk\n");
 		return -ENOENT;
--- uboot/arch/arm/mach-aspeed/ast2600/scu_info.c	2021-09-09 10:20:39.834858201 +0800
+++ uboot-new/arch/arm/mach-aspeed/ast2600/scu_info.c	2021-09-10 15:29:15.842589128 +0800
@@ -27,6 +27,7 @@
 	SOC_ID("AST2600-A3", 0x0503030305030303),
 	SOC_ID("AST2620-A3", 0x0503020305030203),
 	SOC_ID("AST2605-A3", 0x0503010305030103),
+	SOC_ID("AST2625-A3", 0x0503040305030403),
 };
 
 void aspeed_print_soc_id(void)
--- uboot/arch/arm/mach-aspeed/ast2600/board_common.c	2021-09-09 10:20:39.838858191 +0800
+++ uboot-new/arch/arm/mach-aspeed/ast2600/board_common.c	2021-09-11 13:41:05.960619707 +0800
@@ -144,7 +144,7 @@
 
 void board_add_ram_info(int use_default)
 {
-#define MMC_BASE 0x1e6e0000	
+#define MMC_BASE 0x1e6e0000
 #define SCU_BASE 0x1e6e2000
 	uint32_t act_size = 256 << (readl(MMC_BASE + 0x04) & 0x3);
 	uint32_t vga_rsvd = 8 << ((readl(MMC_BASE + 0x04) >> 2) & 0x3);
@@ -154,8 +154,14 @@
 	if (readl(SCU_BASE + 0x594) & BIT(14))
 		vga_rsvd = 0;
 
-	printf(" (capacity:%d MiB, VGA:%d MiB), ECC %s", act_size,
+	printf(" (capacity:%d MiB, VGA:%d MiB, ECC:%s", act_size,
 	       vga_rsvd, ecc == 1 ? "on" : "off");
+
+
+	if (ecc)
+		printf(", ECC size:%d MiB", (readl(MMC_BASE + 0x54) >> 20) + 1);
+
+	printf(")");
 }
 
 union ast2600_pll_reg {
--- uboot/drivers/ram/aspeed/Kconfig	2020-11-20 17:00:27.000000000 +0800
+++ uboot-new/drivers/ram/aspeed/Kconfig	2021-09-10 15:30:57.233474052 +0800
@@ -1,5 +1,6 @@
 if RAM || SPL_RAM
 
+if ASPEED_AST2600
 choice
 	prompt "DDR4 target data rate"
 	default ASPEED_DDR4_1600
@@ -41,6 +42,7 @@
 	default n
 	help
 	  Say Y here to bypass DRAM self test to speed up the boot time
+endif
 
 config ASPEED_ECC
 	bool "aspeed SDRAM error correcting code"
--- uboot/common/image-sig.c	2021-09-09 10:20:39.858858145 +0800
+++ uboot-new/common/image-sig.c	2021-09-11 13:47:11.862589395 +0800
@@ -49,7 +49,31 @@
 		.calculate_sign = EVP_sha256,
 #endif
 		.calculate = hash_calculate,
-	}
+	},
+#ifdef CONFIG_SHA384
+	{
+		.name = "sha384",
+		.checksum_len = SHA384_SUM_LEN,
+		.der_len = SHA384_DER_LEN,
+		.der_prefix = sha384_der_prefix,
+#if IMAGE_ENABLE_SIGN
+		.calculate_sign = EVP_sha384,
+#endif
+		.calculate = hash_calculate,
+	},
+#endif
+#ifdef CONFIG_SHA512
+	{
+		.name = "sha512",
+		.checksum_len = SHA512_SUM_LEN,
+		.der_len = SHA512_DER_LEN,
+		.der_prefix = sha512_der_prefix,
+#if IMAGE_ENABLE_SIGN
+		.calculate_sign = EVP_sha512,
+#endif
+		.calculate = hash_calculate,
+	},
+#endif
 
 };
 
@@ -62,6 +86,13 @@
 		.verify = rsa_verify,
 	},
 	{
+		.name = "rsa3072",
+		.key_len = RSA3072_BYTES,
+		.sign = rsa_sign,
+		.add_verify_data = rsa_add_verify_data,
+		.verify = rsa_verify,
+	},
+	{
 		.name = "rsa4096",
 		.key_len = RSA4096_BYTES,
 		.sign = rsa_sign,
@@ -407,7 +438,7 @@
 	for (name = prop, i = 0; name < end; name += strlen(name) + 1, i++) {
 		debug("   '%s'\n", name);
 		node_inc[i] = (char *)name;
-				if (!strncmp(FIT_CONFS_PATH, name, strlen(FIT_CONFS_PATH)) &&
+		if (!strncmp(FIT_CONFS_PATH, name, strlen(FIT_CONFS_PATH)) &&
 		    name[sizeof(FIT_CONFS_PATH) - 1] == '/' &&
 		    !strcmp(name + sizeof(FIT_CONFS_PATH), config_name)) {
 			debug("      (found config node %s)", config_name);
@@ -484,7 +515,7 @@
 		if (!strncmp(name, FIT_SIG_NODENAME,
 			     strlen(FIT_SIG_NODENAME))) {
 			ret = fit_config_check_sig(fit, noffset, sig_offset,
-						conf_noffset, &err_msg);
+						   conf_noffset, &err_msg);
 			if (ret) {
 				puts("- ");
 			} else {
@@ -502,6 +533,7 @@
 
 	if (verified)
 		return 0;
+
 error:
 	printf(" error!\n%s for '%s' hash node in '%s' config node\n",
 	       err_msg, fit_get_name(fit, noffset, NULL),
--- uboot/include/u-boot/rsa.h	2021-09-09 10:20:39.758858376 +0800
+++ uboot-new/include/u-boot/rsa.h	2021-09-10 15:33:14.264027033 +0800
@@ -135,6 +135,7 @@
 #define RSA_DEFAULT_PADDING_NAME		"pkcs-1.5"
 
 #define RSA2048_BYTES	(2048 / 8)
+#define RSA3072_BYTES	(3072 / 8)
 #define RSA4096_BYTES	(4096 / 8)
 
 /* This is the minimum/maximum key size we support, in bits */
