?RCS: $Id: d_safebcpy.U,v 3.0.1.4 1997/02/28 15:40:58 ram Exp $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log: d_safebcpy.U,v $
?RCS: Revision 3.0.1.4  1997/02/28  15:40:58  ram
?RCS: patch61: improved overlapping copy check
?RCS: patch61: comfort them if they have memmove
?RCS: patch61: added ?F: metalint hint
?RCS:
?RCS: Revision 3.0.1.3  1995/07/25  13:58:40  ram
?RCS: patch56: re-arranged compile line to include ldflags before objects
?RCS:
?RCS: Revision 3.0.1.2  1995/01/11  15:29:23  ram
?RCS: patch45: added 'ldflags' to the test compile line (ADO)
?RCS:
?RCS: Revision 3.0.1.1  1994/05/06  14:49:03  ram
?RCS: patch23: ensure string is not optimized in read-only memory (ADO)
?RCS:
?RCS: Revision 3.0  1993/08/18  12:06:58  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_safebcpy: cat d_bcopy Compile rm_try run \
	d_memmove i_memory i_stdlib i_string i_unistd Oldconfig Setvar
?MAKE:	-pick add $@ %<
?S:d_safebcpy:
?S:	This variable conditionally defines the HAS_SAFE_BCOPY symbol if
?S:	the bcopy() routine can do overlapping copies.  Normally, you
?S:	should probably use memmove().
?S:.
?C:HAS_SAFE_BCOPY (SAFE_BCOPY):
?C:	This symbol, if defined, indicates that the bcopy routine is available
?C:	to copy potentially overlapping memory blocks. Normally, you should
?C:	probably use memmove() or memcpy(). If neither is defined, roll your
?C:	own version.
?C:.
?H:#$d_safebcpy HAS_SAFE_BCOPY	/**/
?H:.
?F:!try
?LINT: set d_safebcpy
: can bcopy handle overlapping blocks?
echo " "
?X: assume the worst.
val="$undef"
case "$d_memmove" in
"$define") echo "I'll use memmove() instead of bcopy() for overlapping copies." ;;
*)	case "$d_bcopy" in
	"$define")
		echo "Checking to see if bcopy() can do overlapping copies..." >&4
		$cat >try.c <<EOCP
#$i_memory I_MEMORY
#$i_stdlib I_STDLIB
#$i_string I_STRING
#$i_unistd I_UNISTD
EOCP
	$cat >>try.c <<'EOCP'
#include <stdio.h>
#ifdef I_MEMORY
#  include <memory.h>
#endif
#ifdef I_STDLIB
#  include <stdlib.h>
#endif
#ifdef I_STRING
#  include <string.h>
#else
#  include <strings.h>
#endif
#ifdef I_UNISTD
#  include <unistd.h>  /* Needed for NetBSD */
#endif
int main()
{
char buf[128], abc[128];
char *b;
int len;
int off;
int align;

/* Copy "abcde..." string to char abc[] so that gcc doesn't
   try to store the string in read-only memory. */
bcopy("abcdefghijklmnopqrstuvwxyz0123456789", abc, 36);

for (align = 7; align >= 0; align--) {
	for (len = 36; len; len--) {
		b = buf+align;
		bcopy(abc, b, len);
		for (off = 1; off <= len; off++) {
			bcopy(b, b+off, len);
			bcopy(b+off, b, len);
			if (bcmp(b, abc, len))
				exit(1);
		}
	}
}
exit(0);
}
EOCP
		set try
		if eval $compile_ok; then
			if $run ./try 2>/dev/null; then
				echo "Yes, it can."
				val="$define"
			else
				echo "It can't, sorry."
			fi
		else
			echo "(I can't compile the test program, so we'll assume not...)"
		fi
		;;
	esac
	$rm_try
	;;
esac
set d_safebcpy
eval $setvar

