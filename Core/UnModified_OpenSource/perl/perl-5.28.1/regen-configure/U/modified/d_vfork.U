?RCS: $Id: d_vfork.U,v 3.0.1.6 1994/08/29 16:18:21 ram Exp $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log: d_vfork.U,v $
?RCS: Revision 3.0.1.6  1994/08/29  16:18:21  ram
?RCS: patch32: set default to 'y' the first time
?RCS:
?RCS: Revision 3.0.1.5  1994/06/20  06:59:14  ram
?RCS: patch30: usevfork was not always properly set
?RCS:
?RCS: Revision 3.0.1.4  1994/05/13  15:20:56  ram
?RCS: patch27: modified to avoid spurious Whoa warnings (ADO)
?RCS:
?RCS: Revision 3.0.1.3  1994/05/06  14:59:09  ram
?RCS: patch23: now explicitly ask whether vfork() should be used (ADO)
?RCS:
?RCS: Revision 3.0.1.2  1993/10/16  13:49:39  ram
?RCS: patch12: added magic for vfork()
?RCS:
?RCS: Revision 3.0.1.1  1993/09/13  16:06:57  ram
?RCS: patch10: removed automatic remapping of vfork on fork (WAD)
?RCS: patch10: added compatibility code for older config.sh (WAD)
?RCS:
?RCS: Revision 3.0  1993/08/18  12:07:55  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_vfork usevfork d_pseudofork: Inlibc Myread Oldconfig Setvar
?MAKE:	-pick add $@ %<
?S:d_vfork:
?S:	This variable conditionally defines the HAS_VFORK symbol, which
?S:	indicates the vfork() routine is available.
?S:.
?S:usevfork:
?S:	This variable is set to true when the user accepts to use vfork.
?S:	It is set to false when no vfork is available or when the user
?S:	explicitly requests not to use vfork.
?S:.
?S:d_pseudofork:
?S:	This variable conditionally defines the HAS_PSEUDOFORK symbol,
?S:	which indicates that an emulation of the fork routine is available.
?S:.
?C:HAS_VFORK (VFORK):
?C:	This symbol, if defined, indicates that vfork() exists.
?C:.
?H:#$d_vfork HAS_VFORK	/**/
?H:.
?C:HAS_PSEUDOFORK:
?C:	This symbol, if defined, indicates that an emulation of the
?C:	fork routine is available.
?C:.
?H:#$d_pseudofork HAS_PSEUDOFORK	/**/
?H:.
?M:vfork: HAS_VFORK
?M:#ifndef HAS_VFORK
?M:#define vfork fork
?M:#endif
?M:.
?T:d_hvfork
: backward compatibility for d_hvfork
if test X$d_hvfork != X; then
	d_vfork="$d_hvfork"
	d_hvfork=''
fi
?X:==========================
: see if there is a vfork
val=''
set vfork val
eval $inlibc

d_pseudofork=$undef

: Ok, but do we want to use it. vfork is reportedly unreliable in
: perl on Solaris 2.x, and probably elsewhere.
case "$val" in
$define)
	echo " "
	case "$usevfork" in
	false) dflt='n';;
	*) dflt='y';;
	esac
	cat <<'EOM'

Perl can only use a vfork() that doesn't suffer from strict
restrictions on calling functions or modifying global data in
the child.  For example, glibc-2.1 contains such a vfork()
that is unsuitable.  If your system provides a proper fork()
call, chances are that you do NOT want perl to use vfork().

EOM
	rp="Do you still want to use vfork()?"
	. ./myread
	case "$ans" in
	y|Y) ;;
	*)
		echo "Ok, we won't use vfork()."
		val="$undef"
		;;
	esac
	;;
esac
?X:
?X: Only set it when final value is known to avoid spurious Whoa's
?X: Then set usevfork accordingly to the current value, for next run
?X:
set d_vfork
eval $setvar
case "$d_vfork" in
$define) usevfork='true';;
*) usevfork='false';;
esac

