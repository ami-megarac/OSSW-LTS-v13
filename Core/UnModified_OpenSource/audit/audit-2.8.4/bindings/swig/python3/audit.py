# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_audit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_audit')
    _audit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_audit', [dirname(__file__)])
        except ImportError:
            import _audit
            return _audit
        try:
            _mod = imp.load_module('_audit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _audit = swig_import_helper()
    del swig_import_helper
else:
    import _audit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


AUDIT_GET = _audit.AUDIT_GET
AUDIT_SET = _audit.AUDIT_SET
AUDIT_LIST = _audit.AUDIT_LIST
AUDIT_ADD = _audit.AUDIT_ADD
AUDIT_DEL = _audit.AUDIT_DEL
AUDIT_USER = _audit.AUDIT_USER
AUDIT_LOGIN = _audit.AUDIT_LOGIN
AUDIT_WATCH_INS = _audit.AUDIT_WATCH_INS
AUDIT_WATCH_REM = _audit.AUDIT_WATCH_REM
AUDIT_WATCH_LIST = _audit.AUDIT_WATCH_LIST
AUDIT_SIGNAL_INFO = _audit.AUDIT_SIGNAL_INFO
AUDIT_ADD_RULE = _audit.AUDIT_ADD_RULE
AUDIT_DEL_RULE = _audit.AUDIT_DEL_RULE
AUDIT_LIST_RULES = _audit.AUDIT_LIST_RULES
AUDIT_TRIM = _audit.AUDIT_TRIM
AUDIT_MAKE_EQUIV = _audit.AUDIT_MAKE_EQUIV
AUDIT_TTY_GET = _audit.AUDIT_TTY_GET
AUDIT_TTY_SET = _audit.AUDIT_TTY_SET
AUDIT_SET_FEATURE = _audit.AUDIT_SET_FEATURE
AUDIT_GET_FEATURE = _audit.AUDIT_GET_FEATURE
AUDIT_FIRST_USER_MSG = _audit.AUDIT_FIRST_USER_MSG
AUDIT_USER_AVC = _audit.AUDIT_USER_AVC
AUDIT_USER_TTY = _audit.AUDIT_USER_TTY
AUDIT_LAST_USER_MSG = _audit.AUDIT_LAST_USER_MSG
AUDIT_FIRST_USER_MSG2 = _audit.AUDIT_FIRST_USER_MSG2
AUDIT_LAST_USER_MSG2 = _audit.AUDIT_LAST_USER_MSG2
AUDIT_DAEMON_START = _audit.AUDIT_DAEMON_START
AUDIT_DAEMON_END = _audit.AUDIT_DAEMON_END
AUDIT_DAEMON_ABORT = _audit.AUDIT_DAEMON_ABORT
AUDIT_DAEMON_CONFIG = _audit.AUDIT_DAEMON_CONFIG
AUDIT_SYSCALL = _audit.AUDIT_SYSCALL
AUDIT_PATH = _audit.AUDIT_PATH
AUDIT_IPC = _audit.AUDIT_IPC
AUDIT_SOCKETCALL = _audit.AUDIT_SOCKETCALL
AUDIT_CONFIG_CHANGE = _audit.AUDIT_CONFIG_CHANGE
AUDIT_SOCKADDR = _audit.AUDIT_SOCKADDR
AUDIT_CWD = _audit.AUDIT_CWD
AUDIT_EXECVE = _audit.AUDIT_EXECVE
AUDIT_IPC_SET_PERM = _audit.AUDIT_IPC_SET_PERM
AUDIT_MQ_OPEN = _audit.AUDIT_MQ_OPEN
AUDIT_MQ_SENDRECV = _audit.AUDIT_MQ_SENDRECV
AUDIT_MQ_NOTIFY = _audit.AUDIT_MQ_NOTIFY
AUDIT_MQ_GETSETATTR = _audit.AUDIT_MQ_GETSETATTR
AUDIT_KERNEL_OTHER = _audit.AUDIT_KERNEL_OTHER
AUDIT_FD_PAIR = _audit.AUDIT_FD_PAIR
AUDIT_OBJ_PID = _audit.AUDIT_OBJ_PID
AUDIT_TTY = _audit.AUDIT_TTY
AUDIT_EOE = _audit.AUDIT_EOE
AUDIT_BPRM_FCAPS = _audit.AUDIT_BPRM_FCAPS
AUDIT_CAPSET = _audit.AUDIT_CAPSET
AUDIT_MMAP = _audit.AUDIT_MMAP
AUDIT_NETFILTER_PKT = _audit.AUDIT_NETFILTER_PKT
AUDIT_NETFILTER_CFG = _audit.AUDIT_NETFILTER_CFG
AUDIT_SECCOMP = _audit.AUDIT_SECCOMP
AUDIT_PROCTITLE = _audit.AUDIT_PROCTITLE
AUDIT_FEATURE_CHANGE = _audit.AUDIT_FEATURE_CHANGE
AUDIT_REPLACE = _audit.AUDIT_REPLACE
AUDIT_KERN_MODULE = _audit.AUDIT_KERN_MODULE
AUDIT_FANOTIFY = _audit.AUDIT_FANOTIFY
AUDIT_AVC = _audit.AUDIT_AVC
AUDIT_SELINUX_ERR = _audit.AUDIT_SELINUX_ERR
AUDIT_AVC_PATH = _audit.AUDIT_AVC_PATH
AUDIT_MAC_POLICY_LOAD = _audit.AUDIT_MAC_POLICY_LOAD
AUDIT_MAC_STATUS = _audit.AUDIT_MAC_STATUS
AUDIT_MAC_CONFIG_CHANGE = _audit.AUDIT_MAC_CONFIG_CHANGE
AUDIT_MAC_UNLBL_ALLOW = _audit.AUDIT_MAC_UNLBL_ALLOW
AUDIT_MAC_CIPSOV4_ADD = _audit.AUDIT_MAC_CIPSOV4_ADD
AUDIT_MAC_CIPSOV4_DEL = _audit.AUDIT_MAC_CIPSOV4_DEL
AUDIT_MAC_MAP_ADD = _audit.AUDIT_MAC_MAP_ADD
AUDIT_MAC_MAP_DEL = _audit.AUDIT_MAC_MAP_DEL
AUDIT_MAC_IPSEC_ADDSA = _audit.AUDIT_MAC_IPSEC_ADDSA
AUDIT_MAC_IPSEC_DELSA = _audit.AUDIT_MAC_IPSEC_DELSA
AUDIT_MAC_IPSEC_ADDSPD = _audit.AUDIT_MAC_IPSEC_ADDSPD
AUDIT_MAC_IPSEC_DELSPD = _audit.AUDIT_MAC_IPSEC_DELSPD
AUDIT_MAC_IPSEC_EVENT = _audit.AUDIT_MAC_IPSEC_EVENT
AUDIT_MAC_UNLBL_STCADD = _audit.AUDIT_MAC_UNLBL_STCADD
AUDIT_MAC_UNLBL_STCDEL = _audit.AUDIT_MAC_UNLBL_STCDEL
AUDIT_MAC_CALIPSO_ADD = _audit.AUDIT_MAC_CALIPSO_ADD
AUDIT_MAC_CALIPSO_DEL = _audit.AUDIT_MAC_CALIPSO_DEL
AUDIT_FIRST_KERN_ANOM_MSG = _audit.AUDIT_FIRST_KERN_ANOM_MSG
AUDIT_LAST_KERN_ANOM_MSG = _audit.AUDIT_LAST_KERN_ANOM_MSG
AUDIT_ANOM_PROMISCUOUS = _audit.AUDIT_ANOM_PROMISCUOUS
AUDIT_ANOM_ABEND = _audit.AUDIT_ANOM_ABEND
AUDIT_ANOM_LINK = _audit.AUDIT_ANOM_LINK
AUDIT_INTEGRITY_DATA = _audit.AUDIT_INTEGRITY_DATA
AUDIT_INTEGRITY_METADATA = _audit.AUDIT_INTEGRITY_METADATA
AUDIT_INTEGRITY_STATUS = _audit.AUDIT_INTEGRITY_STATUS
AUDIT_INTEGRITY_HASH = _audit.AUDIT_INTEGRITY_HASH
AUDIT_INTEGRITY_PCR = _audit.AUDIT_INTEGRITY_PCR
AUDIT_INTEGRITY_RULE = _audit.AUDIT_INTEGRITY_RULE
AUDIT_KERNEL = _audit.AUDIT_KERNEL
AUDIT_FILTER_USER = _audit.AUDIT_FILTER_USER
AUDIT_FILTER_TASK = _audit.AUDIT_FILTER_TASK
AUDIT_FILTER_ENTRY = _audit.AUDIT_FILTER_ENTRY
AUDIT_FILTER_WATCH = _audit.AUDIT_FILTER_WATCH
AUDIT_FILTER_EXIT = _audit.AUDIT_FILTER_EXIT
AUDIT_FILTER_TYPE = _audit.AUDIT_FILTER_TYPE
AUDIT_FILTER_FS = _audit.AUDIT_FILTER_FS
AUDIT_NR_FILTERS = _audit.AUDIT_NR_FILTERS
AUDIT_FILTER_PREPEND = _audit.AUDIT_FILTER_PREPEND
AUDIT_NEVER = _audit.AUDIT_NEVER
AUDIT_POSSIBLE = _audit.AUDIT_POSSIBLE
AUDIT_ALWAYS = _audit.AUDIT_ALWAYS
AUDIT_MAX_FIELDS = _audit.AUDIT_MAX_FIELDS
AUDIT_MAX_KEY_LEN = _audit.AUDIT_MAX_KEY_LEN
AUDIT_BITMASK_SIZE = _audit.AUDIT_BITMASK_SIZE
AUDIT_SYSCALL_CLASSES = _audit.AUDIT_SYSCALL_CLASSES
AUDIT_CLASS_DIR_WRITE = _audit.AUDIT_CLASS_DIR_WRITE
AUDIT_CLASS_DIR_WRITE_32 = _audit.AUDIT_CLASS_DIR_WRITE_32
AUDIT_CLASS_CHATTR = _audit.AUDIT_CLASS_CHATTR
AUDIT_CLASS_CHATTR_32 = _audit.AUDIT_CLASS_CHATTR_32
AUDIT_CLASS_READ = _audit.AUDIT_CLASS_READ
AUDIT_CLASS_READ_32 = _audit.AUDIT_CLASS_READ_32
AUDIT_CLASS_WRITE = _audit.AUDIT_CLASS_WRITE
AUDIT_CLASS_WRITE_32 = _audit.AUDIT_CLASS_WRITE_32
AUDIT_CLASS_SIGNAL = _audit.AUDIT_CLASS_SIGNAL
AUDIT_CLASS_SIGNAL_32 = _audit.AUDIT_CLASS_SIGNAL_32
AUDIT_UNUSED_BITS = _audit.AUDIT_UNUSED_BITS
AUDIT_COMPARE_UID_TO_OBJ_UID = _audit.AUDIT_COMPARE_UID_TO_OBJ_UID
AUDIT_COMPARE_GID_TO_OBJ_GID = _audit.AUDIT_COMPARE_GID_TO_OBJ_GID
AUDIT_COMPARE_EUID_TO_OBJ_UID = _audit.AUDIT_COMPARE_EUID_TO_OBJ_UID
AUDIT_COMPARE_EGID_TO_OBJ_GID = _audit.AUDIT_COMPARE_EGID_TO_OBJ_GID
AUDIT_COMPARE_AUID_TO_OBJ_UID = _audit.AUDIT_COMPARE_AUID_TO_OBJ_UID
AUDIT_COMPARE_SUID_TO_OBJ_UID = _audit.AUDIT_COMPARE_SUID_TO_OBJ_UID
AUDIT_COMPARE_SGID_TO_OBJ_GID = _audit.AUDIT_COMPARE_SGID_TO_OBJ_GID
AUDIT_COMPARE_FSUID_TO_OBJ_UID = _audit.AUDIT_COMPARE_FSUID_TO_OBJ_UID
AUDIT_COMPARE_FSGID_TO_OBJ_GID = _audit.AUDIT_COMPARE_FSGID_TO_OBJ_GID
AUDIT_COMPARE_UID_TO_AUID = _audit.AUDIT_COMPARE_UID_TO_AUID
AUDIT_COMPARE_UID_TO_EUID = _audit.AUDIT_COMPARE_UID_TO_EUID
AUDIT_COMPARE_UID_TO_FSUID = _audit.AUDIT_COMPARE_UID_TO_FSUID
AUDIT_COMPARE_UID_TO_SUID = _audit.AUDIT_COMPARE_UID_TO_SUID
AUDIT_COMPARE_AUID_TO_FSUID = _audit.AUDIT_COMPARE_AUID_TO_FSUID
AUDIT_COMPARE_AUID_TO_SUID = _audit.AUDIT_COMPARE_AUID_TO_SUID
AUDIT_COMPARE_AUID_TO_EUID = _audit.AUDIT_COMPARE_AUID_TO_EUID
AUDIT_COMPARE_EUID_TO_SUID = _audit.AUDIT_COMPARE_EUID_TO_SUID
AUDIT_COMPARE_EUID_TO_FSUID = _audit.AUDIT_COMPARE_EUID_TO_FSUID
AUDIT_COMPARE_SUID_TO_FSUID = _audit.AUDIT_COMPARE_SUID_TO_FSUID
AUDIT_COMPARE_GID_TO_EGID = _audit.AUDIT_COMPARE_GID_TO_EGID
AUDIT_COMPARE_GID_TO_FSGID = _audit.AUDIT_COMPARE_GID_TO_FSGID
AUDIT_COMPARE_GID_TO_SGID = _audit.AUDIT_COMPARE_GID_TO_SGID
AUDIT_COMPARE_EGID_TO_FSGID = _audit.AUDIT_COMPARE_EGID_TO_FSGID
AUDIT_COMPARE_EGID_TO_SGID = _audit.AUDIT_COMPARE_EGID_TO_SGID
AUDIT_COMPARE_SGID_TO_FSGID = _audit.AUDIT_COMPARE_SGID_TO_FSGID
AUDIT_MAX_FIELD_COMPARE = _audit.AUDIT_MAX_FIELD_COMPARE
AUDIT_PID = _audit.AUDIT_PID
AUDIT_UID = _audit.AUDIT_UID
AUDIT_EUID = _audit.AUDIT_EUID
AUDIT_SUID = _audit.AUDIT_SUID
AUDIT_FSUID = _audit.AUDIT_FSUID
AUDIT_GID = _audit.AUDIT_GID
AUDIT_EGID = _audit.AUDIT_EGID
AUDIT_SGID = _audit.AUDIT_SGID
AUDIT_FSGID = _audit.AUDIT_FSGID
AUDIT_LOGINUID = _audit.AUDIT_LOGINUID
AUDIT_PERS = _audit.AUDIT_PERS
AUDIT_ARCH = _audit.AUDIT_ARCH
AUDIT_MSGTYPE = _audit.AUDIT_MSGTYPE
AUDIT_SUBJ_USER = _audit.AUDIT_SUBJ_USER
AUDIT_SUBJ_ROLE = _audit.AUDIT_SUBJ_ROLE
AUDIT_SUBJ_TYPE = _audit.AUDIT_SUBJ_TYPE
AUDIT_SUBJ_SEN = _audit.AUDIT_SUBJ_SEN
AUDIT_SUBJ_CLR = _audit.AUDIT_SUBJ_CLR
AUDIT_PPID = _audit.AUDIT_PPID
AUDIT_OBJ_USER = _audit.AUDIT_OBJ_USER
AUDIT_OBJ_ROLE = _audit.AUDIT_OBJ_ROLE
AUDIT_OBJ_TYPE = _audit.AUDIT_OBJ_TYPE
AUDIT_OBJ_LEV_LOW = _audit.AUDIT_OBJ_LEV_LOW
AUDIT_OBJ_LEV_HIGH = _audit.AUDIT_OBJ_LEV_HIGH
AUDIT_LOGINUID_SET = _audit.AUDIT_LOGINUID_SET
AUDIT_SESSIONID = _audit.AUDIT_SESSIONID
AUDIT_FSTYPE = _audit.AUDIT_FSTYPE
AUDIT_DEVMAJOR = _audit.AUDIT_DEVMAJOR
AUDIT_DEVMINOR = _audit.AUDIT_DEVMINOR
AUDIT_INODE = _audit.AUDIT_INODE
AUDIT_EXIT = _audit.AUDIT_EXIT
AUDIT_SUCCESS = _audit.AUDIT_SUCCESS
AUDIT_WATCH = _audit.AUDIT_WATCH
AUDIT_PERM = _audit.AUDIT_PERM
AUDIT_DIR = _audit.AUDIT_DIR
AUDIT_FILETYPE = _audit.AUDIT_FILETYPE
AUDIT_OBJ_UID = _audit.AUDIT_OBJ_UID
AUDIT_OBJ_GID = _audit.AUDIT_OBJ_GID
AUDIT_FIELD_COMPARE = _audit.AUDIT_FIELD_COMPARE
AUDIT_EXE = _audit.AUDIT_EXE
AUDIT_ARG0 = _audit.AUDIT_ARG0
AUDIT_ARG1 = _audit.AUDIT_ARG1
AUDIT_ARG2 = _audit.AUDIT_ARG2
AUDIT_ARG3 = _audit.AUDIT_ARG3
AUDIT_FILTERKEY = _audit.AUDIT_FILTERKEY
AUDIT_NEGATE = _audit.AUDIT_NEGATE
AUDIT_BIT_MASK = _audit.AUDIT_BIT_MASK
AUDIT_LESS_THAN = _audit.AUDIT_LESS_THAN
AUDIT_GREATER_THAN = _audit.AUDIT_GREATER_THAN
AUDIT_NOT_EQUAL = _audit.AUDIT_NOT_EQUAL
AUDIT_EQUAL = _audit.AUDIT_EQUAL
AUDIT_BIT_TEST = _audit.AUDIT_BIT_TEST
AUDIT_LESS_THAN_OR_EQUAL = _audit.AUDIT_LESS_THAN_OR_EQUAL
AUDIT_GREATER_THAN_OR_EQUAL = _audit.AUDIT_GREATER_THAN_OR_EQUAL
AUDIT_OPERATORS = _audit.AUDIT_OPERATORS
Audit_equal = _audit.Audit_equal
Audit_not_equal = _audit.Audit_not_equal
Audit_bitmask = _audit.Audit_bitmask
Audit_bittest = _audit.Audit_bittest
Audit_lt = _audit.Audit_lt
Audit_gt = _audit.Audit_gt
Audit_le = _audit.Audit_le
Audit_ge = _audit.Audit_ge
Audit_bad = _audit.Audit_bad
AUDIT_STATUS_ENABLED = _audit.AUDIT_STATUS_ENABLED
AUDIT_STATUS_FAILURE = _audit.AUDIT_STATUS_FAILURE
AUDIT_STATUS_PID = _audit.AUDIT_STATUS_PID
AUDIT_STATUS_RATE_LIMIT = _audit.AUDIT_STATUS_RATE_LIMIT
AUDIT_STATUS_BACKLOG_LIMIT = _audit.AUDIT_STATUS_BACKLOG_LIMIT
AUDIT_STATUS_BACKLOG_WAIT_TIME = _audit.AUDIT_STATUS_BACKLOG_WAIT_TIME
AUDIT_STATUS_LOST = _audit.AUDIT_STATUS_LOST
AUDIT_FEATURE_BITMAP_BACKLOG_LIMIT = _audit.AUDIT_FEATURE_BITMAP_BACKLOG_LIMIT
AUDIT_FEATURE_BITMAP_BACKLOG_WAIT_TIME = _audit.AUDIT_FEATURE_BITMAP_BACKLOG_WAIT_TIME
AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH = _audit.AUDIT_FEATURE_BITMAP_EXECUTABLE_PATH
AUDIT_FEATURE_BITMAP_EXCLUDE_EXTEND = _audit.AUDIT_FEATURE_BITMAP_EXCLUDE_EXTEND
AUDIT_FEATURE_BITMAP_SESSIONID_FILTER = _audit.AUDIT_FEATURE_BITMAP_SESSIONID_FILTER
AUDIT_FEATURE_BITMAP_LOST_RESET = _audit.AUDIT_FEATURE_BITMAP_LOST_RESET
AUDIT_FEATURE_BITMAP_FILTER_FS = _audit.AUDIT_FEATURE_BITMAP_FILTER_FS
AUDIT_FEATURE_BITMAP_ALL = _audit.AUDIT_FEATURE_BITMAP_ALL
AUDIT_VERSION_LATEST = _audit.AUDIT_VERSION_LATEST
AUDIT_VERSION_BACKLOG_LIMIT = _audit.AUDIT_VERSION_BACKLOG_LIMIT
AUDIT_VERSION_BACKLOG_WAIT_TIME = _audit.AUDIT_VERSION_BACKLOG_WAIT_TIME
AUDIT_FAIL_SILENT = _audit.AUDIT_FAIL_SILENT
AUDIT_FAIL_PRINTK = _audit.AUDIT_FAIL_PRINTK
AUDIT_FAIL_PANIC = _audit.AUDIT_FAIL_PANIC
__AUDIT_ARCH_CONVENTION_MASK = _audit.__AUDIT_ARCH_CONVENTION_MASK
__AUDIT_ARCH_CONVENTION_MIPS64_N32 = _audit.__AUDIT_ARCH_CONVENTION_MIPS64_N32
__AUDIT_ARCH_64BIT = _audit.__AUDIT_ARCH_64BIT
__AUDIT_ARCH_LE = _audit.__AUDIT_ARCH_LE
AUDIT_PERM_EXEC = _audit.AUDIT_PERM_EXEC
AUDIT_PERM_WRITE = _audit.AUDIT_PERM_WRITE
AUDIT_PERM_READ = _audit.AUDIT_PERM_READ
AUDIT_PERM_ATTR = _audit.AUDIT_PERM_ATTR
AUDIT_MESSAGE_TEXT_MAX = _audit.AUDIT_MESSAGE_TEXT_MAX
AUDIT_NLGRP_NONE = _audit.AUDIT_NLGRP_NONE
AUDIT_NLGRP_READLOG = _audit.AUDIT_NLGRP_READLOG
__AUDIT_NLGRP_MAX = _audit.__AUDIT_NLGRP_MAX
class audit_status(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mask = _swig_property(_audit.audit_status_mask_get, _audit.audit_status_mask_set)
    enabled = _swig_property(_audit.audit_status_enabled_get, _audit.audit_status_enabled_set)
    failure = _swig_property(_audit.audit_status_failure_get, _audit.audit_status_failure_set)
    pid = _swig_property(_audit.audit_status_pid_get, _audit.audit_status_pid_set)
    rate_limit = _swig_property(_audit.audit_status_rate_limit_get, _audit.audit_status_rate_limit_set)
    backlog_limit = _swig_property(_audit.audit_status_backlog_limit_get, _audit.audit_status_backlog_limit_set)
    lost = _swig_property(_audit.audit_status_lost_get, _audit.audit_status_lost_set)
    backlog = _swig_property(_audit.audit_status_backlog_get, _audit.audit_status_backlog_set)
    version = _swig_property(_audit.audit_status_version_get, _audit.audit_status_version_set)
    feature_bitmap = _swig_property(_audit.audit_status_feature_bitmap_get, _audit.audit_status_feature_bitmap_set)
    backlog_wait_time = _swig_property(_audit.audit_status_backlog_wait_time_get, _audit.audit_status_backlog_wait_time_set)

    def __init__(self):
        this = _audit.new_audit_status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_status
    __del__ = lambda self: None
audit_status_swigregister = _audit.audit_status_swigregister
audit_status_swigregister(audit_status)

class audit_features(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vers = _swig_property(_audit.audit_features_vers_get, _audit.audit_features_vers_set)
    mask = _swig_property(_audit.audit_features_mask_get, _audit.audit_features_mask_set)
    features = _swig_property(_audit.audit_features_features_get, _audit.audit_features_features_set)
    lock = _swig_property(_audit.audit_features_lock_get, _audit.audit_features_lock_set)

    def __init__(self):
        this = _audit.new_audit_features()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_features
    __del__ = lambda self: None
audit_features_swigregister = _audit.audit_features_swigregister
audit_features_swigregister(audit_features)
AUDIT_FEATURE_VERSION = _audit.AUDIT_FEATURE_VERSION

AUDIT_FEATURE_ONLY_UNSET_LOGINUID = _audit.AUDIT_FEATURE_ONLY_UNSET_LOGINUID
AUDIT_FEATURE_LOGINUID_IMMUTABLE = _audit.AUDIT_FEATURE_LOGINUID_IMMUTABLE
AUDIT_LAST_FEATURE = _audit.AUDIT_LAST_FEATURE
class audit_tty_status(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    enabled = _swig_property(_audit.audit_tty_status_enabled_get, _audit.audit_tty_status_enabled_set)
    log_passwd = _swig_property(_audit.audit_tty_status_log_passwd_get, _audit.audit_tty_status_log_passwd_set)

    def __init__(self):
        this = _audit.new_audit_tty_status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_tty_status
    __del__ = lambda self: None
audit_tty_status_swigregister = _audit.audit_tty_status_swigregister
audit_tty_status_swigregister(audit_tty_status)

class audit_rule_data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    flags = _swig_property(_audit.audit_rule_data_flags_get, _audit.audit_rule_data_flags_set)
    action = _swig_property(_audit.audit_rule_data_action_get, _audit.audit_rule_data_action_set)
    field_count = _swig_property(_audit.audit_rule_data_field_count_get, _audit.audit_rule_data_field_count_set)
    mask = _swig_property(_audit.audit_rule_data_mask_get, _audit.audit_rule_data_mask_set)
    fields = _swig_property(_audit.audit_rule_data_fields_get, _audit.audit_rule_data_fields_set)
    values = _swig_property(_audit.audit_rule_data_values_get, _audit.audit_rule_data_values_set)
    fieldflags = _swig_property(_audit.audit_rule_data_fieldflags_get, _audit.audit_rule_data_fieldflags_set)
    buflen = _swig_property(_audit.audit_rule_data_buflen_get, _audit.audit_rule_data_buflen_set)
    buf = _swig_property(_audit.audit_rule_data_buf_get, _audit.audit_rule_data_buf_set)

    def __init__(self):
        this = _audit.new_audit_rule_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_rule_data
    __del__ = lambda self: None
audit_rule_data_swigregister = _audit.audit_rule_data_swigregister
audit_rule_data_swigregister(audit_rule_data)

_STDINT_H = _audit._STDINT_H
INT8_MIN = _audit.INT8_MIN
INT16_MIN = _audit.INT16_MIN
INT32_MIN = _audit.INT32_MIN
INT64_MIN = _audit.INT64_MIN
INT8_MAX = _audit.INT8_MAX
INT16_MAX = _audit.INT16_MAX
INT32_MAX = _audit.INT32_MAX
INT64_MAX = _audit.INT64_MAX
UINT8_MAX = _audit.UINT8_MAX
UINT16_MAX = _audit.UINT16_MAX
UINT32_MAX = _audit.UINT32_MAX
UINT64_MAX = _audit.UINT64_MAX
INT_LEAST8_MIN = _audit.INT_LEAST8_MIN
INT_LEAST16_MIN = _audit.INT_LEAST16_MIN
INT_LEAST32_MIN = _audit.INT_LEAST32_MIN
INT_LEAST64_MIN = _audit.INT_LEAST64_MIN
INT_LEAST8_MAX = _audit.INT_LEAST8_MAX
INT_LEAST16_MAX = _audit.INT_LEAST16_MAX
INT_LEAST32_MAX = _audit.INT_LEAST32_MAX
INT_LEAST64_MAX = _audit.INT_LEAST64_MAX
UINT_LEAST8_MAX = _audit.UINT_LEAST8_MAX
UINT_LEAST16_MAX = _audit.UINT_LEAST16_MAX
UINT_LEAST32_MAX = _audit.UINT_LEAST32_MAX
UINT_LEAST64_MAX = _audit.UINT_LEAST64_MAX
INT_FAST8_MIN = _audit.INT_FAST8_MIN
INT_FAST16_MIN = _audit.INT_FAST16_MIN
INT_FAST32_MIN = _audit.INT_FAST32_MIN
INT_FAST64_MIN = _audit.INT_FAST64_MIN
INT_FAST8_MAX = _audit.INT_FAST8_MAX
INT_FAST16_MAX = _audit.INT_FAST16_MAX
INT_FAST32_MAX = _audit.INT_FAST32_MAX
INT_FAST64_MAX = _audit.INT_FAST64_MAX
UINT_FAST8_MAX = _audit.UINT_FAST8_MAX
UINT_FAST16_MAX = _audit.UINT_FAST16_MAX
UINT_FAST32_MAX = _audit.UINT_FAST32_MAX
UINT_FAST64_MAX = _audit.UINT_FAST64_MAX
INTPTR_MIN = _audit.INTPTR_MIN
INTPTR_MAX = _audit.INTPTR_MAX
UINTPTR_MAX = _audit.UINTPTR_MAX
INTMAX_MIN = _audit.INTMAX_MIN
INTMAX_MAX = _audit.INTMAX_MAX
UINTMAX_MAX = _audit.UINTMAX_MAX
PTRDIFF_MIN = _audit.PTRDIFF_MIN
PTRDIFF_MAX = _audit.PTRDIFF_MAX
SIG_ATOMIC_MIN = _audit.SIG_ATOMIC_MIN
SIG_ATOMIC_MAX = _audit.SIG_ATOMIC_MAX
SIZE_MAX = _audit.SIZE_MAX
WINT_MIN = _audit.WINT_MIN
WINT_MAX = _audit.WINT_MAX
AUDIT_USER_AUTH = _audit.AUDIT_USER_AUTH
AUDIT_USER_ACCT = _audit.AUDIT_USER_ACCT
AUDIT_USER_MGMT = _audit.AUDIT_USER_MGMT
AUDIT_CRED_ACQ = _audit.AUDIT_CRED_ACQ
AUDIT_CRED_DISP = _audit.AUDIT_CRED_DISP
AUDIT_USER_START = _audit.AUDIT_USER_START
AUDIT_USER_END = _audit.AUDIT_USER_END
AUDIT_USER_CHAUTHTOK = _audit.AUDIT_USER_CHAUTHTOK
AUDIT_USER_ERR = _audit.AUDIT_USER_ERR
AUDIT_CRED_REFR = _audit.AUDIT_CRED_REFR
AUDIT_USYS_CONFIG = _audit.AUDIT_USYS_CONFIG
AUDIT_USER_LOGIN = _audit.AUDIT_USER_LOGIN
AUDIT_USER_LOGOUT = _audit.AUDIT_USER_LOGOUT
AUDIT_ADD_USER = _audit.AUDIT_ADD_USER
AUDIT_DEL_USER = _audit.AUDIT_DEL_USER
AUDIT_ADD_GROUP = _audit.AUDIT_ADD_GROUP
AUDIT_DEL_GROUP = _audit.AUDIT_DEL_GROUP
AUDIT_DAC_CHECK = _audit.AUDIT_DAC_CHECK
AUDIT_CHGRP_ID = _audit.AUDIT_CHGRP_ID
AUDIT_TEST = _audit.AUDIT_TEST
AUDIT_TRUSTED_APP = _audit.AUDIT_TRUSTED_APP
AUDIT_USER_SELINUX_ERR = _audit.AUDIT_USER_SELINUX_ERR
AUDIT_USER_CMD = _audit.AUDIT_USER_CMD
AUDIT_CHUSER_ID = _audit.AUDIT_CHUSER_ID
AUDIT_GRP_AUTH = _audit.AUDIT_GRP_AUTH
AUDIT_SYSTEM_BOOT = _audit.AUDIT_SYSTEM_BOOT
AUDIT_SYSTEM_SHUTDOWN = _audit.AUDIT_SYSTEM_SHUTDOWN
AUDIT_SYSTEM_RUNLEVEL = _audit.AUDIT_SYSTEM_RUNLEVEL
AUDIT_SERVICE_START = _audit.AUDIT_SERVICE_START
AUDIT_SERVICE_STOP = _audit.AUDIT_SERVICE_STOP
AUDIT_GRP_MGMT = _audit.AUDIT_GRP_MGMT
AUDIT_GRP_CHAUTHTOK = _audit.AUDIT_GRP_CHAUTHTOK
AUDIT_MAC_CHECK = _audit.AUDIT_MAC_CHECK
AUDIT_ACCT_LOCK = _audit.AUDIT_ACCT_LOCK
AUDIT_ACCT_UNLOCK = _audit.AUDIT_ACCT_UNLOCK
AUDIT_USER_DEVICE = _audit.AUDIT_USER_DEVICE
AUDIT_SOFTWARE_UPDATE = _audit.AUDIT_SOFTWARE_UPDATE
AUDIT_FIRST_DAEMON = _audit.AUDIT_FIRST_DAEMON
AUDIT_LAST_DAEMON = _audit.AUDIT_LAST_DAEMON
AUDIT_DAEMON_RECONFIG = _audit.AUDIT_DAEMON_RECONFIG
AUDIT_DAEMON_ROTATE = _audit.AUDIT_DAEMON_ROTATE
AUDIT_DAEMON_RESUME = _audit.AUDIT_DAEMON_RESUME
AUDIT_DAEMON_ACCEPT = _audit.AUDIT_DAEMON_ACCEPT
AUDIT_DAEMON_CLOSE = _audit.AUDIT_DAEMON_CLOSE
AUDIT_DAEMON_ERR = _audit.AUDIT_DAEMON_ERR
AUDIT_FIRST_EVENT = _audit.AUDIT_FIRST_EVENT
AUDIT_LAST_EVENT = _audit.AUDIT_LAST_EVENT
AUDIT_FIRST_SELINUX = _audit.AUDIT_FIRST_SELINUX
AUDIT_LAST_SELINUX = _audit.AUDIT_LAST_SELINUX
AUDIT_FIRST_APPARMOR = _audit.AUDIT_FIRST_APPARMOR
AUDIT_LAST_APPARMOR = _audit.AUDIT_LAST_APPARMOR
AUDIT_AA = _audit.AUDIT_AA
AUDIT_APPARMOR_AUDIT = _audit.AUDIT_APPARMOR_AUDIT
AUDIT_APPARMOR_ALLOWED = _audit.AUDIT_APPARMOR_ALLOWED
AUDIT_APPARMOR_DENIED = _audit.AUDIT_APPARMOR_DENIED
AUDIT_APPARMOR_HINT = _audit.AUDIT_APPARMOR_HINT
AUDIT_APPARMOR_STATUS = _audit.AUDIT_APPARMOR_STATUS
AUDIT_APPARMOR_ERROR = _audit.AUDIT_APPARMOR_ERROR
AUDIT_FIRST_KERN_CRYPTO_MSG = _audit.AUDIT_FIRST_KERN_CRYPTO_MSG
AUDIT_LAST_KERN_CRYPTO_MSG = _audit.AUDIT_LAST_KERN_CRYPTO_MSG
AUDIT_INTEGRITY_FIRST_MSG = _audit.AUDIT_INTEGRITY_FIRST_MSG
AUDIT_INTEGRITY_LAST_MSG = _audit.AUDIT_INTEGRITY_LAST_MSG
AUDIT_FIRST_ANOM_MSG = _audit.AUDIT_FIRST_ANOM_MSG
AUDIT_LAST_ANOM_MSG = _audit.AUDIT_LAST_ANOM_MSG
AUDIT_ANOM_LOGIN_FAILURES = _audit.AUDIT_ANOM_LOGIN_FAILURES
AUDIT_ANOM_LOGIN_TIME = _audit.AUDIT_ANOM_LOGIN_TIME
AUDIT_ANOM_LOGIN_SESSIONS = _audit.AUDIT_ANOM_LOGIN_SESSIONS
AUDIT_ANOM_LOGIN_ACCT = _audit.AUDIT_ANOM_LOGIN_ACCT
AUDIT_ANOM_LOGIN_LOCATION = _audit.AUDIT_ANOM_LOGIN_LOCATION
AUDIT_ANOM_MAX_DAC = _audit.AUDIT_ANOM_MAX_DAC
AUDIT_ANOM_MAX_MAC = _audit.AUDIT_ANOM_MAX_MAC
AUDIT_ANOM_AMTU_FAIL = _audit.AUDIT_ANOM_AMTU_FAIL
AUDIT_ANOM_RBAC_FAIL = _audit.AUDIT_ANOM_RBAC_FAIL
AUDIT_ANOM_RBAC_INTEGRITY_FAIL = _audit.AUDIT_ANOM_RBAC_INTEGRITY_FAIL
AUDIT_ANOM_CRYPTO_FAIL = _audit.AUDIT_ANOM_CRYPTO_FAIL
AUDIT_ANOM_ACCESS_FS = _audit.AUDIT_ANOM_ACCESS_FS
AUDIT_ANOM_EXEC = _audit.AUDIT_ANOM_EXEC
AUDIT_ANOM_MK_EXEC = _audit.AUDIT_ANOM_MK_EXEC
AUDIT_ANOM_ADD_ACCT = _audit.AUDIT_ANOM_ADD_ACCT
AUDIT_ANOM_DEL_ACCT = _audit.AUDIT_ANOM_DEL_ACCT
AUDIT_ANOM_MOD_ACCT = _audit.AUDIT_ANOM_MOD_ACCT
AUDIT_ANOM_ROOT_TRANS = _audit.AUDIT_ANOM_ROOT_TRANS
AUDIT_ANOM_LOGIN_SERVICE = _audit.AUDIT_ANOM_LOGIN_SERVICE
AUDIT_FIRST_ANOM_RESP = _audit.AUDIT_FIRST_ANOM_RESP
AUDIT_LAST_ANOM_RESP = _audit.AUDIT_LAST_ANOM_RESP
AUDIT_RESP_ANOMALY = _audit.AUDIT_RESP_ANOMALY
AUDIT_RESP_ALERT = _audit.AUDIT_RESP_ALERT
AUDIT_RESP_KILL_PROC = _audit.AUDIT_RESP_KILL_PROC
AUDIT_RESP_TERM_ACCESS = _audit.AUDIT_RESP_TERM_ACCESS
AUDIT_RESP_ACCT_REMOTE = _audit.AUDIT_RESP_ACCT_REMOTE
AUDIT_RESP_ACCT_LOCK_TIMED = _audit.AUDIT_RESP_ACCT_LOCK_TIMED
AUDIT_RESP_ACCT_UNLOCK_TIMED = _audit.AUDIT_RESP_ACCT_UNLOCK_TIMED
AUDIT_RESP_ACCT_LOCK = _audit.AUDIT_RESP_ACCT_LOCK
AUDIT_RESP_TERM_LOCK = _audit.AUDIT_RESP_TERM_LOCK
AUDIT_RESP_SEBOOL = _audit.AUDIT_RESP_SEBOOL
AUDIT_RESP_EXEC = _audit.AUDIT_RESP_EXEC
AUDIT_RESP_SINGLE = _audit.AUDIT_RESP_SINGLE
AUDIT_RESP_HALT = _audit.AUDIT_RESP_HALT
AUDIT_RESP_ORIGIN_BLOCK = _audit.AUDIT_RESP_ORIGIN_BLOCK
AUDIT_RESP_ORIGIN_BLOCK_TIMED = _audit.AUDIT_RESP_ORIGIN_BLOCK_TIMED
AUDIT_FIRST_USER_LSPP_MSG = _audit.AUDIT_FIRST_USER_LSPP_MSG
AUDIT_LAST_USER_LSPP_MSG = _audit.AUDIT_LAST_USER_LSPP_MSG
AUDIT_USER_ROLE_CHANGE = _audit.AUDIT_USER_ROLE_CHANGE
AUDIT_ROLE_ASSIGN = _audit.AUDIT_ROLE_ASSIGN
AUDIT_ROLE_REMOVE = _audit.AUDIT_ROLE_REMOVE
AUDIT_LABEL_OVERRIDE = _audit.AUDIT_LABEL_OVERRIDE
AUDIT_LABEL_LEVEL_CHANGE = _audit.AUDIT_LABEL_LEVEL_CHANGE
AUDIT_USER_LABELED_EXPORT = _audit.AUDIT_USER_LABELED_EXPORT
AUDIT_USER_UNLABELED_EXPORT = _audit.AUDIT_USER_UNLABELED_EXPORT
AUDIT_DEV_ALLOC = _audit.AUDIT_DEV_ALLOC
AUDIT_DEV_DEALLOC = _audit.AUDIT_DEV_DEALLOC
AUDIT_FS_RELABEL = _audit.AUDIT_FS_RELABEL
AUDIT_USER_MAC_POLICY_LOAD = _audit.AUDIT_USER_MAC_POLICY_LOAD
AUDIT_ROLE_MODIFY = _audit.AUDIT_ROLE_MODIFY
AUDIT_USER_MAC_CONFIG_CHANGE = _audit.AUDIT_USER_MAC_CONFIG_CHANGE
AUDIT_FIRST_CRYPTO_MSG = _audit.AUDIT_FIRST_CRYPTO_MSG
AUDIT_CRYPTO_TEST_USER = _audit.AUDIT_CRYPTO_TEST_USER
AUDIT_CRYPTO_PARAM_CHANGE_USER = _audit.AUDIT_CRYPTO_PARAM_CHANGE_USER
AUDIT_CRYPTO_LOGIN = _audit.AUDIT_CRYPTO_LOGIN
AUDIT_CRYPTO_LOGOUT = _audit.AUDIT_CRYPTO_LOGOUT
AUDIT_CRYPTO_KEY_USER = _audit.AUDIT_CRYPTO_KEY_USER
AUDIT_CRYPTO_FAILURE_USER = _audit.AUDIT_CRYPTO_FAILURE_USER
AUDIT_CRYPTO_REPLAY_USER = _audit.AUDIT_CRYPTO_REPLAY_USER
AUDIT_CRYPTO_SESSION = _audit.AUDIT_CRYPTO_SESSION
AUDIT_CRYPTO_IKE_SA = _audit.AUDIT_CRYPTO_IKE_SA
AUDIT_CRYPTO_IPSEC_SA = _audit.AUDIT_CRYPTO_IPSEC_SA
AUDIT_LAST_CRYPTO_MSG = _audit.AUDIT_LAST_CRYPTO_MSG
AUDIT_FIRST_VIRT_MSG = _audit.AUDIT_FIRST_VIRT_MSG
AUDIT_VIRT_CONTROL = _audit.AUDIT_VIRT_CONTROL
AUDIT_VIRT_RESOURCE = _audit.AUDIT_VIRT_RESOURCE
AUDIT_VIRT_MACHINE_ID = _audit.AUDIT_VIRT_MACHINE_ID
AUDIT_VIRT_INTEGRITY_CHECK = _audit.AUDIT_VIRT_INTEGRITY_CHECK
AUDIT_VIRT_CREATE = _audit.AUDIT_VIRT_CREATE
AUDIT_VIRT_DESTROY = _audit.AUDIT_VIRT_DESTROY
AUDIT_VIRT_MIGRATE_IN = _audit.AUDIT_VIRT_MIGRATE_IN
AUDIT_VIRT_MIGRATE_OUT = _audit.AUDIT_VIRT_MIGRATE_OUT
AUDIT_LAST_VIRT_MSG = _audit.AUDIT_LAST_VIRT_MSG
AUDIT_KEY_SEPARATOR = _audit.AUDIT_KEY_SEPARATOR
AUDIT_FILTER_EXCLUDE = _audit.AUDIT_FILTER_EXCLUDE
AUDIT_FILTER_MASK = _audit.AUDIT_FILTER_MASK
AUDIT_FILTER_UNSET = _audit.AUDIT_FILTER_UNSET
EM_ARM = _audit.EM_ARM
EM_AARCH64 = _audit.EM_AARCH64
AUDIT_INTERP_SEPARATOR = _audit.AUDIT_INTERP_SEPARATOR
class audit_sig_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    uid = _swig_property(_audit.audit_sig_info_uid_get, _audit.audit_sig_info_uid_set)
    pid = _swig_property(_audit.audit_sig_info_pid_get, _audit.audit_sig_info_pid_set)
    ctx = _swig_property(_audit.audit_sig_info_ctx_get, _audit.audit_sig_info_ctx_set)

    def __init__(self):
        this = _audit.new_audit_sig_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_sig_info
    __del__ = lambda self: None
audit_sig_info_swigregister = _audit.audit_sig_info_swigregister
audit_sig_info_swigregister(audit_sig_info)

MAX_AUDIT_MESSAGE_LENGTH = _audit.MAX_AUDIT_MESSAGE_LENGTH
class audit_message(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    nlh = _swig_property(_audit.audit_message_nlh_get, _audit.audit_message_nlh_set)
    data = _swig_property(_audit.audit_message_data_get, _audit.audit_message_data_set)

    def __init__(self):
        this = _audit.new_audit_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_message
    __del__ = lambda self: None
audit_message_swigregister = _audit.audit_message_swigregister
audit_message_swigregister(audit_message)

class audit_reply(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_audit.audit_reply_type_get, _audit.audit_reply_type_set)
    len = _swig_property(_audit.audit_reply_len_get, _audit.audit_reply_len_set)
    nlh = _swig_property(_audit.audit_reply_nlh_get, _audit.audit_reply_nlh_set)
    msg = _swig_property(_audit.audit_reply_msg_get, _audit.audit_reply_msg_set)
    status = _swig_property(_audit.audit_reply_status_get, _audit.audit_reply_status_set)
    ruledata = _swig_property(_audit.audit_reply_ruledata_get, _audit.audit_reply_ruledata_set)
    login = _swig_property(_audit.audit_reply_login_get, _audit.audit_reply_login_set)
    message = _swig_property(_audit.audit_reply_message_get, _audit.audit_reply_message_set)
    error = _swig_property(_audit.audit_reply_error_get, _audit.audit_reply_error_set)
    signal_info = _swig_property(_audit.audit_reply_signal_info_get, _audit.audit_reply_signal_info_set)
    conf = _swig_property(_audit.audit_reply_conf_get, _audit.audit_reply_conf_set)
    features = _swig_property(_audit.audit_reply_features_get, _audit.audit_reply_features_set)

    def __init__(self):
        this = _audit.new_audit_reply()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_reply
    __del__ = lambda self: None
audit_reply_swigregister = _audit.audit_reply_swigregister
audit_reply_swigregister(audit_reply)

class audit_dispatcher_header(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ver = _swig_property(_audit.audit_dispatcher_header_ver_get, _audit.audit_dispatcher_header_ver_set)
    hlen = _swig_property(_audit.audit_dispatcher_header_hlen_get, _audit.audit_dispatcher_header_hlen_set)
    type = _swig_property(_audit.audit_dispatcher_header_type_get, _audit.audit_dispatcher_header_type_set)
    size = _swig_property(_audit.audit_dispatcher_header_size_get, _audit.audit_dispatcher_header_size_set)

    def __init__(self):
        this = _audit.new_audit_dispatcher_header()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _audit.delete_audit_dispatcher_header
    __del__ = lambda self: None
audit_dispatcher_header_swigregister = _audit.audit_dispatcher_header_swigregister
audit_dispatcher_header_swigregister(audit_dispatcher_header)

AUDISP_PROTOCOL_VER = _audit.AUDISP_PROTOCOL_VER
AUDISP_PROTOCOL_VER2 = _audit.AUDISP_PROTOCOL_VER2
MACH_X86 = _audit.MACH_X86
MACH_86_64 = _audit.MACH_86_64
MACH_IA64 = _audit.MACH_IA64
MACH_PPC64 = _audit.MACH_PPC64
MACH_PPC = _audit.MACH_PPC
MACH_S390X = _audit.MACH_S390X
MACH_S390 = _audit.MACH_S390
MACH_ALPHA = _audit.MACH_ALPHA
MACH_ARM = _audit.MACH_ARM
MACH_AARCH64 = _audit.MACH_AARCH64
MACH_PPC64LE = _audit.MACH_PPC64LE
FAIL_IGNORE = _audit.FAIL_IGNORE
FAIL_LOG = _audit.FAIL_LOG
FAIL_TERMINATE = _audit.FAIL_TERMINATE
MSG_STDERR = _audit.MSG_STDERR
MSG_SYSLOG = _audit.MSG_SYSLOG
MSG_QUIET = _audit.MSG_QUIET
DBG_NO = _audit.DBG_NO
DBG_YES = _audit.DBG_YES

def set_aumessage_mode(mode: 'message_t', debug: 'debug_message_t') -> "void":
    return _audit.set_aumessage_mode(mode, debug)
set_aumessage_mode = _audit.set_aumessage_mode
GET_REPLY_BLOCKING = _audit.GET_REPLY_BLOCKING
GET_REPLY_NONBLOCKING = _audit.GET_REPLY_NONBLOCKING

def audit_open() -> "int":
    return _audit.audit_open()
audit_open = _audit.audit_open

def audit_close(fd: 'int') -> "void":
    return _audit.audit_close(fd)
audit_close = _audit.audit_close

def audit_get_reply(fd: 'int', rep: 'audit_reply', block: 'reply_t', peek: 'int') -> "int":
    return _audit.audit_get_reply(fd, rep, block, peek)
audit_get_reply = _audit.audit_get_reply

def audit_getloginuid() -> "uid_t":
    return _audit.audit_getloginuid()
audit_getloginuid = _audit.audit_getloginuid

def audit_setloginuid(uid: 'uid_t') -> "int":
    return _audit.audit_setloginuid(uid)
audit_setloginuid = _audit.audit_setloginuid

def audit_get_session() -> "uint32_t":
    return _audit.audit_get_session()
audit_get_session = _audit.audit_get_session

def audit_detect_machine() -> "int":
    return _audit.audit_detect_machine()
audit_detect_machine = _audit.audit_detect_machine

def audit_determine_machine(arch: 'char const *') -> "int":
    return _audit.audit_determine_machine(arch)
audit_determine_machine = _audit.audit_determine_machine

def audit_name_to_field(field: 'char const *') -> "int":
    return _audit.audit_name_to_field(field)
audit_name_to_field = _audit.audit_name_to_field

def audit_field_to_name(field: 'int') -> "char const *":
    return _audit.audit_field_to_name(field)
audit_field_to_name = _audit.audit_field_to_name

def audit_name_to_syscall(sc: 'char const *', machine: 'int') -> "int":
    return _audit.audit_name_to_syscall(sc, machine)
audit_name_to_syscall = _audit.audit_name_to_syscall

def audit_syscall_to_name(sc: 'int', machine: 'int') -> "char const *":
    return _audit.audit_syscall_to_name(sc, machine)
audit_syscall_to_name = _audit.audit_syscall_to_name

def audit_name_to_flag(flag: 'char const *') -> "int":
    return _audit.audit_name_to_flag(flag)
audit_name_to_flag = _audit.audit_name_to_flag

def audit_flag_to_name(flag: 'int') -> "char const *":
    return _audit.audit_flag_to_name(flag)
audit_flag_to_name = _audit.audit_flag_to_name

def audit_name_to_action(action: 'char const *') -> "int":
    return _audit.audit_name_to_action(action)
audit_name_to_action = _audit.audit_name_to_action

def audit_action_to_name(action: 'int') -> "char const *":
    return _audit.audit_action_to_name(action)
audit_action_to_name = _audit.audit_action_to_name

def audit_name_to_msg_type(msg_type: 'char const *') -> "int":
    return _audit.audit_name_to_msg_type(msg_type)
audit_name_to_msg_type = _audit.audit_name_to_msg_type

def audit_msg_type_to_name(msg_type: 'int') -> "char const *":
    return _audit.audit_msg_type_to_name(msg_type)
audit_msg_type_to_name = _audit.audit_msg_type_to_name

def audit_name_to_machine(machine: 'char const *') -> "int":
    return _audit.audit_name_to_machine(machine)
audit_name_to_machine = _audit.audit_name_to_machine

def audit_machine_to_name(machine: 'int') -> "char const *":
    return _audit.audit_machine_to_name(machine)
audit_machine_to_name = _audit.audit_machine_to_name

def audit_machine_to_elf(machine: 'int') -> "unsigned int":
    return _audit.audit_machine_to_elf(machine)
audit_machine_to_elf = _audit.audit_machine_to_elf

def audit_elf_to_machine(elf: 'unsigned int') -> "int":
    return _audit.audit_elf_to_machine(elf)
audit_elf_to_machine = _audit.audit_elf_to_machine

def audit_operator_to_symbol(op: 'int') -> "char const *":
    return _audit.audit_operator_to_symbol(op)
audit_operator_to_symbol = _audit.audit_operator_to_symbol

def audit_name_to_errno(error: 'char const *') -> "int":
    return _audit.audit_name_to_errno(error)
audit_name_to_errno = _audit.audit_name_to_errno

def audit_errno_to_name(error: 'int') -> "char const *":
    return _audit.audit_errno_to_name(error)
audit_errno_to_name = _audit.audit_errno_to_name

def audit_name_to_ftype(name: 'char const *') -> "int":
    return _audit.audit_name_to_ftype(name)
audit_name_to_ftype = _audit.audit_name_to_ftype

def audit_ftype_to_name(ftype: 'int') -> "char const *":
    return _audit.audit_ftype_to_name(ftype)
audit_ftype_to_name = _audit.audit_ftype_to_name

def audit_name_to_fstype(name: 'char const *') -> "int":
    return _audit.audit_name_to_fstype(name)
audit_name_to_fstype = _audit.audit_name_to_fstype

def audit_fstype_to_name(fstype: 'int') -> "char const *":
    return _audit.audit_fstype_to_name(fstype)
audit_fstype_to_name = _audit.audit_fstype_to_name

def audit_number_to_errmsg(errnumber: 'int', opt: 'char const *') -> "void":
    return _audit.audit_number_to_errmsg(errnumber, opt)
audit_number_to_errmsg = _audit.audit_number_to_errmsg

def audit_request_status(fd: 'int') -> "int":
    return _audit.audit_request_status(fd)
audit_request_status = _audit.audit_request_status

def audit_is_enabled(fd: 'int') -> "int":
    return _audit.audit_is_enabled(fd)
audit_is_enabled = _audit.audit_is_enabled

def get_auditfail_action(failmode: 'auditfail_t *') -> "int":
    return _audit.get_auditfail_action(failmode)
get_auditfail_action = _audit.get_auditfail_action

def audit_request_features(fd: 'int') -> "int":
    return _audit.audit_request_features(fd)
audit_request_features = _audit.audit_request_features

def audit_get_features() -> "uint32_t":
    return _audit.audit_get_features()
audit_get_features = _audit.audit_get_features
WAIT_NO = _audit.WAIT_NO
WAIT_YES = _audit.WAIT_YES

def audit_set_pid(fd: 'int', pid: 'uint32_t', wmode: 'rep_wait_t') -> "int":
    return _audit.audit_set_pid(fd, pid, wmode)
audit_set_pid = _audit.audit_set_pid

def audit_set_enabled(fd: 'int', enabled: 'uint32_t') -> "int":
    return _audit.audit_set_enabled(fd, enabled)
audit_set_enabled = _audit.audit_set_enabled

def audit_set_failure(fd: 'int', failure: 'uint32_t') -> "int":
    return _audit.audit_set_failure(fd, failure)
audit_set_failure = _audit.audit_set_failure

def audit_set_rate_limit(fd: 'int', limit: 'uint32_t') -> "int":
    return _audit.audit_set_rate_limit(fd, limit)
audit_set_rate_limit = _audit.audit_set_rate_limit

def audit_set_backlog_limit(fd: 'int', limit: 'uint32_t') -> "int":
    return _audit.audit_set_backlog_limit(fd, limit)
audit_set_backlog_limit = _audit.audit_set_backlog_limit

def audit_set_backlog_wait_time(fd: 'int', bwt: 'uint32_t') -> "int":
    return _audit.audit_set_backlog_wait_time(fd, bwt)
audit_set_backlog_wait_time = _audit.audit_set_backlog_wait_time

def audit_reset_lost(fd: 'int') -> "int":
    return _audit.audit_reset_lost(fd)
audit_reset_lost = _audit.audit_reset_lost

def audit_set_feature(fd: 'int', feature: 'unsigned int', value: 'unsigned int', lock: 'unsigned int') -> "int":
    return _audit.audit_set_feature(fd, feature, value, lock)
audit_set_feature = _audit.audit_set_feature

def audit_set_loginuid_immutable(fd: 'int') -> "int":
    return _audit.audit_set_loginuid_immutable(fd)
audit_set_loginuid_immutable = _audit.audit_set_loginuid_immutable

def audit_request_rules_list_data(fd: 'int') -> "int":
    return _audit.audit_request_rules_list_data(fd)
audit_request_rules_list_data = _audit.audit_request_rules_list_data

def audit_request_signal_info(fd: 'int') -> "int":
    return _audit.audit_request_signal_info(fd)
audit_request_signal_info = _audit.audit_request_signal_info

def audit_update_watch_perms(rule: 'audit_rule_data', perms: 'int') -> "int":
    return _audit.audit_update_watch_perms(rule, perms)
audit_update_watch_perms = _audit.audit_update_watch_perms

def audit_add_watch(rulep: 'struct audit_rule_data **', path: 'char const *') -> "int":
    return _audit.audit_add_watch(rulep, path)
audit_add_watch = _audit.audit_add_watch

def audit_add_dir(rulep: 'struct audit_rule_data **', path: 'char const *') -> "int":
    return _audit.audit_add_dir(rulep, path)
audit_add_dir = _audit.audit_add_dir

def audit_add_watch_dir(type: 'int', rulep: 'struct audit_rule_data **', path: 'char const *') -> "int":
    return _audit.audit_add_watch_dir(type, rulep, path)
audit_add_watch_dir = _audit.audit_add_watch_dir

def audit_trim_subtrees(fd: 'int') -> "int":
    return _audit.audit_trim_subtrees(fd)
audit_trim_subtrees = _audit.audit_trim_subtrees

def audit_make_equivalent(fd: 'int', mount_point: 'char const *', subtree: 'char const *') -> "int":
    return _audit.audit_make_equivalent(fd, mount_point, subtree)
audit_make_equivalent = _audit.audit_make_equivalent

def audit_add_rule_data(fd: 'int', rule: 'audit_rule_data', flags: 'int', action: 'int') -> "int":
    return _audit.audit_add_rule_data(fd, rule, flags, action)
audit_add_rule_data = _audit.audit_add_rule_data

def audit_delete_rule_data(fd: 'int', rule: 'audit_rule_data', flags: 'int', action: 'int') -> "int":
    return _audit.audit_delete_rule_data(fd, rule, flags, action)
audit_delete_rule_data = _audit.audit_delete_rule_data

def audit_value_needs_encoding(str: 'char const *', len: 'unsigned int') -> "int":
    return _audit.audit_value_needs_encoding(str, len)
audit_value_needs_encoding = _audit.audit_value_needs_encoding

def audit_encode_value(final: 'char *', buf: 'char const *', size: 'unsigned int') -> "char *":
    return _audit.audit_encode_value(final, buf, size)
audit_encode_value = _audit.audit_encode_value

def audit_encode_nv_string(name: 'char const *', value: 'char const *', vlen: 'unsigned int') -> "char *":
    return _audit.audit_encode_nv_string(name, value, vlen)
audit_encode_nv_string = _audit.audit_encode_nv_string

def audit_log_user_message(audit_fd: 'int', type: 'int', message: 'char const *', hostname: 'char const *', addr: 'char const *', tty: 'char const *', result: 'int') -> "int":
    return _audit.audit_log_user_message(audit_fd, type, message, hostname, addr, tty, result)
audit_log_user_message = _audit.audit_log_user_message

def audit_log_user_comm_message(audit_fd: 'int', type: 'int', message: 'char const *', comm: 'char const *', hostname: 'char const *', addr: 'char const *', tty: 'char const *', result: 'int') -> "int":
    return _audit.audit_log_user_comm_message(audit_fd, type, message, comm, hostname, addr, tty, result)
audit_log_user_comm_message = _audit.audit_log_user_comm_message

def audit_log_acct_message(audit_fd: 'int', type: 'int', pgname: 'char const *', op: 'char const *', name: 'char const *', id: 'unsigned int', host: 'char const *', addr: 'char const *', tty: 'char const *', result: 'int') -> "int":
    return _audit.audit_log_acct_message(audit_fd, type, pgname, op, name, id, host, addr, tty, result)
audit_log_acct_message = _audit.audit_log_acct_message

def audit_log_user_avc_message(audit_fd: 'int', type: 'int', message: 'char const *', hostname: 'char const *', addr: 'char const *', tty: 'char const *', uid: 'uid_t') -> "int":
    return _audit.audit_log_user_avc_message(audit_fd, type, message, hostname, addr, tty, uid)
audit_log_user_avc_message = _audit.audit_log_user_avc_message

def audit_log_semanage_message(audit_fd: 'int', type: 'int', pgname: 'char const *', op: 'char const *', name: 'char const *', id: 'unsigned int', new_seuser: 'char const *', new_role: 'char const *', new_range: 'char const *', old_seuser: 'char const *', old_role: 'char const *', old_range: 'char const *', host: 'char const *', addr: 'char const *', tty: 'char const *', result: 'int') -> "int":
    return _audit.audit_log_semanage_message(audit_fd, type, pgname, op, name, id, new_seuser, new_role, new_range, old_seuser, old_role, old_range, host, addr, tty, result)
audit_log_semanage_message = _audit.audit_log_semanage_message

def audit_log_user_command(audit_fd: 'int', type: 'int', command: 'char const *', tty: 'char const *', result: 'int') -> "int":
    return _audit.audit_log_user_command(audit_fd, type, command, tty, result)
audit_log_user_command = _audit.audit_log_user_command

def audit_rule_syscall_data(rule: 'audit_rule_data', scall: 'int') -> "int":
    return _audit.audit_rule_syscall_data(rule, scall)
audit_rule_syscall_data = _audit.audit_rule_syscall_data

def audit_rule_syscallbyname_data(rule: 'audit_rule_data', scall: 'char const *') -> "int":
    return _audit.audit_rule_syscallbyname_data(rule, scall)
audit_rule_syscallbyname_data = _audit.audit_rule_syscallbyname_data

def audit_rule_fieldpair_data(rulep: 'struct audit_rule_data **', pair: 'char const *', flags: 'int') -> "int":
    return _audit.audit_rule_fieldpair_data(rulep, pair, flags)
audit_rule_fieldpair_data = _audit.audit_rule_fieldpair_data

def audit_rule_interfield_comp_data(rulep: 'struct audit_rule_data **', pair: 'char const *', flags: 'int') -> "int":
    return _audit.audit_rule_interfield_comp_data(rulep, pair, flags)
audit_rule_interfield_comp_data = _audit.audit_rule_interfield_comp_data

def audit_rule_free_data(rule: 'audit_rule_data') -> "void":
    return _audit.audit_rule_free_data(rule)
audit_rule_free_data = _audit.audit_rule_free_data

def audit_can_control() -> "int":
    return _audit.audit_can_control()
audit_can_control = _audit.audit_can_control

def audit_can_write() -> "int":
    return _audit.audit_can_write()
audit_can_write = _audit.audit_can_write

def audit_can_read() -> "int":
    return _audit.audit_can_read()
audit_can_read = _audit.audit_can_read


