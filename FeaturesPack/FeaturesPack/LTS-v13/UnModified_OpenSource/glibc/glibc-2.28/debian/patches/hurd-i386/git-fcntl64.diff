commit 346ef23f197a0c8ba807c344bd39101b711050ee
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Thu Nov 15 00:52:36 2018 +0100

    hurd: Fix F_*LK* fcntl with __USE_FILE_OFFSET64
    
    struct flock64 uses 64bit values. This introduces other values for F_GETLK,
    F_SETLK, F_SETLKW to distinguish between both.
    
            * sysdeps/mach/hurd/bits/fcntl.h (F_GETLK64, F_SETLK64, F_SETLKW64): New
            macros
            [__USE_FILE_OFFSET64] (F_GETLK, F_SETLK, F_SETLKW): Define to F_GETLK64,
            F_SETLK64, F_SETLKW64, respectively.
            * sysdeps/mach/hurd/f_setlk.c: New file.
            * sysdeps/mach/hurd/f_setlk.h: New file.
            * sysdeps/mach/hurd/Makefile [$(subdir) = io] (sysdeps_routines): Add
            f_setlk.
            * sysdeps/mach/hurd/fcntl.c: Include "f_setlk.h".h".
            (__libc_fcntl): Move non-flock operations to...
            * sysdeps/mach/hurd/vfcntl.c (__libc_vfcntl): ... New file.

Index: glibc-2.28/sysdeps/mach/hurd/Makefile
===================================================================
--- glibc-2.28.orig/sysdeps/mach/hurd/Makefile
+++ glibc-2.28/sysdeps/mach/hurd/Makefile
@@ -194,6 +194,10 @@ ifeq (hurd, $(subdir))
 sysdep_routines += cthreads
 endif
 
+ifeq (io, $(subdir))
+sysdep_routines += f_setlk
+endif
+
 ifeq ($(subdir),sunrpc)
 sysdep_headers += nfs/nfs.h
 endif
Index: glibc-2.28/sysdeps/mach/hurd/bits/fcntl.h
===================================================================
--- glibc-2.28.orig/sysdeps/mach/hurd/bits/fcntl.h
+++ glibc-2.28/sysdeps/mach/hurd/bits/fcntl.h
@@ -163,9 +163,18 @@
 # define F_GETOWN	5	/* Get owner (receiver of SIGIO).  */
 # define F_SETOWN	6	/* Set owner (receiver of SIGIO).  */
 #endif
-#define	F_GETLK		7	/* Get record locking info.  */
-#define	F_SETLK		8	/* Set record locking info (non-blocking).  */
-#define	F_SETLKW	9	/* Set record locking info (blocking).  */
+#ifdef __USE_FILE_OFFSET64
+# define	F_GETLK		F_GETLK64
+# define	F_SETLK		F_SETLK64
+# define	F_SETLKW	F_SETLKW64
+#else
+# define	F_GETLK		7	/* Get record locking info.  */
+# define	F_SETLK		8	/* Set record locking info (non-blocking).  */
+# define	F_SETLKW	9	/* Set record locking info (blocking).  */
+#endif
+#define	F_GETLK64	10	/* Get record locking info.  */
+#define	F_SETLK64	11	/* Set record locking info (non-blocking).  */
+#define	F_SETLKW64	12	/* Set record locking info (blocking).  */
 
 #ifdef __USE_XOPEN2K8
 # define F_DUPFD_CLOEXEC 1030	/* Duplicate, set FD_CLOEXEC on new one.  */
Index: glibc-2.28/sysdeps/mach/hurd/f_setlk.c
===================================================================
--- /dev/null
+++ glibc-2.28/sysdeps/mach/hurd/f_setlk.c
@@ -0,0 +1,69 @@
+/* f_setlk -- locking part of fcntl
+   Copyright (C) 2014-2015 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#include <sys/types.h>
+#include <sys/file.h>
+#include <fcntl.h>
+#include <errno.h>
+
+/* XXX
+   We need new RPCs to support POSIX.1 fcntl file locking!!
+   For the time being we support the whole-file case only,
+   with all kinds of WRONG WRONG WRONG semantics,
+   by using flock.  This is definitely the Wrong Thing,
+   but it might be better than nothing (?).  */
+int
+__f_setlk (int fd, int type, int whence, __off64_t start, __off64_t len, int wait)
+{
+  int cmd = 0;
+
+  switch (type)
+    {
+    case F_RDLCK: cmd = LOCK_SH; break;
+    case F_WRLCK: cmd = LOCK_EX; break;
+    case F_UNLCK: cmd = LOCK_UN; break;
+    default:
+      errno = EINVAL;
+      return -1;
+    }
+
+  if (cmd != LOCK_UN && wait == 0)
+    cmd |= LOCK_NB;
+
+  switch (whence)
+    {
+    case SEEK_SET:
+      if (start == 0 && len == 0) /* Whole file request.  */
+	break;
+      /* It seems to be common for applications to lock the first
+	 byte of the file when they are really doing whole-file locking.
+	 So, since it's so wrong already, might as well do that too.  */
+      if (start == 0 && len == 1)
+	break;
+      /* FALLTHROUGH */
+    case SEEK_CUR:
+    case SEEK_END:
+      errno = ENOTSUP;
+      return -1;
+    default:
+      errno = EINVAL;
+      return -1;
+    }
+
+  return __flock (fd, cmd);
+}
Index: glibc-2.28/sysdeps/mach/hurd/f_setlk.h
===================================================================
--- /dev/null
+++ glibc-2.28/sysdeps/mach/hurd/f_setlk.h
@@ -0,0 +1,23 @@
+/* Copyright (C) 2014-2015 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <http://www.gnu.org/licenses/>.  */
+
+#ifndef _F_SETLK_H
+#define _F_SETLK_H 1
+
+extern int __f_setlk (int fd, int type, int whence, __off64_t start, __off64_t len, int wait);
+
+#endif /* f_setlk.h */
Index: glibc-2.28/sysdeps/mach/hurd/fcntl.c
===================================================================
--- glibc-2.28.orig/sysdeps/mach/hurd/fcntl.c
+++ glibc-2.28/sysdeps/mach/hurd/fcntl.c
@@ -21,6 +21,7 @@
 #include <hurd/fd.h>
 #include <stdarg.h>
 #include <sys/file.h>		/* XXX for LOCK_* */
+#include "f_setlk.h"
 
 /* Perform file control operations on FD.  */
 int
@@ -128,56 +129,50 @@ __libc_fcntl (int fd, int cmd, ...)
     case F_SETLK:
     case F_SETLKW:
       {
-	/* XXX
-	   We need new RPCs to support POSIX.1 fcntl file locking!!
-	   For the time being we support the whole-file case only,
-	   with all kinds of WRONG WRONG WRONG semantics,
-	   by using flock.  This is definitely the Wrong Thing,
-	   but it might be better than nothing (?).  */
 	struct flock *fl = va_arg (ap, struct flock *);
+	int wait = 0;
 	va_end (ap);
 	switch (cmd)
 	  {
 	  case F_GETLK:
 	    errno = ENOSYS;
 	    return -1;
+	  case F_SETLKW:
+	    wait = 1;
+	    /* FALLTHROUGH */
 	  case F_SETLK:
-	    cmd = LOCK_NB;
-	    break;
-	  default:
-	    cmd = 0;
+	    return __f_setlk (fd, fl->l_type, fl->l_whence,
+			      fl->l_start, fl->l_len, wait);
 	    break;
-	  }
-	switch (fl->l_type)
-	  {
-	  case F_RDLCK: cmd |= LOCK_SH; break;
-	  case F_WRLCK: cmd |= LOCK_EX; break;
-	  case F_UNLCK: cmd |= LOCK_UN; break;
 	  default:
 	    errno = EINVAL;
 	    return -1;
 	  }
-	switch (fl->l_whence)
+      }
+
+    case F_GETLK64:
+    case F_SETLK64:
+    case F_SETLKW64:
+      {
+	struct flock64 *fl = va_arg (ap, struct flock64 *);
+	int wait = 0;
+	va_end (ap);
+	switch (cmd)
 	  {
-	  case SEEK_SET:
-	    if (fl->l_start == 0 && fl->l_len == 0) /* Whole file request.  */
-	      break;
-	    /* It seems to be common for applications to lock the first
-	       byte of the file when they are really doing whole-file locking.
-	       So, since it's so wrong already, might as well do that too.  */
-	    if (fl->l_start == 0 && fl->l_len == 1)
-	      break;
-	    /* FALLTHROUGH */
-	  case SEEK_CUR:
-	  case SEEK_END:
-	    errno = ENOTSUP;
+	  case F_GETLK64:
+	    errno = ENOSYS;
 	    return -1;
+	  case F_SETLKW64:
+	    wait = 1;
+	    /* FALLTHROUGH */
+	  case F_SETLK64:
+	    return __f_setlk (fd, fl->l_type, fl->l_whence,
+			      fl->l_start, fl->l_len, wait);
+	    break;
 	  default:
 	    errno = EINVAL;
 	    return -1;
 	  }
-
-	return __flock (fd, cmd);
       }
 
     case F_GETFL:		/* Get per-open flags.  */
@@ -215,3 +210,4 @@ strong_alias (__libc_fcntl, __libc_fcntl
 libc_hidden_def (__libc_fcntl64)
 weak_alias (__libc_fcntl64, __fcntl64)
 libc_hidden_weak (__fcntl64)
+weak_alias (__fcntl64, fcntl64)
Index: glibc-2.28/sysdeps/mach/hurd/fcntl64.c
===================================================================
--- /dev/null
+++ glibc-2.28/sysdeps/mach/hurd/fcntl64.c
@@ -0,0 +1 @@
+/* fcntl64 is defined in fcntl.c as an alias.  */
